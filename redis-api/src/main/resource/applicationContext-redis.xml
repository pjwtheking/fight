<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd">
     
    <context:component-scan base-package="com.redis" />
    
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
	    <property name="locations">
	        <array>  
	            <value>classpath:redis.properties</value>  
	        </array>  
	    </property>  
	</bean>
       
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
    	<!-- 控制一个 pool 最多有多少个状态为 idle 的jedis实例 -->
	    <property name="maxIdle" value="${redis.maxIdle}" />
	    <!-- 控制一个 pool 可分配多少个jedis实例 --> 
	    <property name="maxTotal" value="${redis.maxActive}" />  
	    <!-- 当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException -->  
	    <property name="maxWaitMillis" value="${redis.maxWait}" /> 
	    <!-- 在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的 -->  
	    <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
	    <property name="testOnReturn" value="${redis.testOnReturn}" />  
	</bean>
      
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
       <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <!-- 支持16个数据库（相当于不同用户）可以使不同的应用程序数据彼此分开同时又存储在相同的实例上 -->
        <property name="database" value="${redis.database}"/>
        <property name="password" value="${redis.pass}"/>
        <property name="poolConfig" ref="poolConfig"/>
    </bean>

	<!-- 序列化策略 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
    	<property name="connectionFactory" ref="connectionFactory"></property>
   		<property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>
       
</beans>